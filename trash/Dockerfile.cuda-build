# Build argon2-gpu with CUDA support in Ubuntu 20.04
FROM ubuntu:20.04

# Prevent interactive prompts
ENV DEBIAN_FRONTEND=noninteractive

# Install build dependencies and CUDA
RUN apt-get update && apt-get install -y \
    cmake \
    build-essential \
    git \
    wget \
    gnupg2 \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Add NVIDIA package repository and install CUDA
RUN wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-keyring_1.0-1_all.deb \
    && dpkg -i cuda-keyring_1.0-1_all.deb \
    && apt-get update \
    && apt-get install -y cuda-toolkit-11-8 \
    && rm -rf /var/lib/apt/lists/* cuda-keyring_1.0-1_all.deb

# Set CUDA environment
ENV PATH=/usr/local/cuda/bin:$PATH
ENV LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH

# Set working directory
WORKDIR /build

# Copy source code
COPY . /build/

# Clean previous build
RUN rm -rf CMakeCache.txt CMakeFiles/ Makefile *.so argon2-gpu-*

# Fix CUDA architecture for RTX 3070/4060 and avoid OpenCL issues
RUN sed -i 's/arch sm_30/gencode arch=compute_75,code=sm_75;-gencode arch=compute_86,code=sm_86;-gencode arch=compute_89,code=sm_89/' CMakeLists.txt

# Configure with CUDA explicitly enabled
RUN cmake . -DCUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda \
    -DNO_CUDA=OFF \
    -DCMAKE_BUILD_TYPE=Release

# Build only essential libraries (skip OpenCL if it fails)
RUN make argon2-gpu-common argon2-cuda -j$(nproc) || echo "Some targets failed, continuing..."

# Create output directory
RUN mkdir -p /output

# Copy built libraries (only CUDA ones)
RUN cp libargon2-cuda.so libargon2-gpu-common.so /output/ 2>/dev/null || echo "Copying available libraries..."
RUN cp -r include /output/

# Check what we built
RUN echo "✅ Built libraries:" && ls -la /output/*.so || echo "No libraries found"
RUN echo "🔍 CUDA symbols:" && nm -D libargon2-cuda.so | grep -i global | head -5 || echo "No symbols"

# Set entrypoint to copy libraries out
CMD ["cp", "-r", "/output/.", "/host/"]